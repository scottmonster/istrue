#!/usr/bin/env bash

# Comprehensive test suite for the istrue function
# Tests all aspects of the function including:
# - Basic boolean values
# - Command execution
# - Numeric values
# - File test expressions
# - Variables and expressions
# - Edge cases and potential issues

# Source necessary functions
target="$1"  
# source "$1"

# Color definitions for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'  # No Color 

# Test counter
tests_run=0
tests_passed=0
tests_failed=0

# Test function
test_istrue() {
  local test_expr="$1"
  local expected="$2"
  local category="$3"
  local desc="$4"
  
  ((tests_run++))
  
  echo -e "${BLUE}[$category]${NC} Testing: ${YELLOW}$test_expr${NC}"
  echo -e "  Description: $desc"
  # res=$(istrue "$test_expr")


  # if istrue "$test_expr"; then
  if $target "$test_expr"; then
    local result="true"
  else
    local result="false"
  fi
  
  if [[ "$result" == "$expected" ]]; then
    ((tests_passed++))
    echo -e "${GREEN}PASS${NC} - Got expected result: $result"
  else
    ((tests_failed++))
    echo -e "${RED}FAIL${NC} - Expected: $expected, Got: $result"
  fi
  echo
}



echo "=== TESTING ISTRUE FUNCTION ==="
echo "Running comprehensive test suite..."
echo


source test_def.sh

[[ -L s ]] && rm s

# Print summary
echo "=== TEST SUMMARY ==="
echo "Tests run:    $tests_run"
echo -e "Tests passed: ${GREEN}$tests_passed${NC}"
if [[ $tests_failed -gt 0 ]]; then
  echo -e "Tests failed: ${RED}$tests_failed${NC}"
else
  echo -e "Tests failed: ${GREEN}$tests_failed${NC}"
fi

# Test isfalse as well
# echo
# echo "=== BONUS: TESTING ISFALSE FUNCTION ==="
# if isfalse "true"; then
#   echo -e "${GREEN}PASS${NC} - isfalse with 'true' returned false"
# else
#   echo -e "${RED}FAIL${NC} - isfalse with 'true' returned true"
# fi

# if isfalse "false"; then
#   echo -e "${GREEN}PASS${NC} - isfalse with 'false' returned true"
# else
#   echo -e "${RED}FAIL${NC} - isfalse with 'false' returned false"
# fi

# Exit with status based on test results
[[ $tests_failed -eq 0 ]] && exit 0 || exit 1